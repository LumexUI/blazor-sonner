@namespace Blazor.Sonner
@inject DomInterop DomInterop

<li @ref="@_toastRef"
    style="
--index: @Index;
--toasts-before: @Index;
--z-index: @(Toasts.Count - Index);
--initial-height: @($"{_initialHeight.ToString( CultureInfo.InvariantCulture )}px");
"
    tabindex="0"
    data-sonner-toast
    data-styled="true"
    data-mounted="@_isMounted.ToAttr()"
    data-visible="@_isVisible.ToAttr()"
    data-expanded="false"
    data-front="@_isFront.ToAttr()"
    data-y-position="@_position.Y"
    data-x-position="@_position.X">
    <div data-content>
        <div data-title>@Model.Title</div>

        @if( !string.IsNullOrWhiteSpace( Model.Description ) )
        {
            <div data-description>@Model.Description</div>
        }
    </div>
</li>

@code {
    [Parameter] public int Index { get; set; }
    [Parameter] public ToastModel Model { get; set; } = default!;
    [Parameter] public Position Position { get; set; } = Position.BottomRight;

    [CascadingParameter] private Toaster Toaster { get; set; } = default!;

    private List<ToastModel> Toasts => Toaster.FilteredToasts;

    private bool _isMounted;
    private bool _isFront;
    private bool _isVisible;

    private double _initialHeight;

    private (string Y, string X) _position;

    private ElementReference _toastRef;

    protected override void OnParametersSet()
    {
        _position = Utils.MapPosition( Position );

        _isFront = Index == 0;
        _isVisible = Index + 1 <= Toaster.VisibleToasts;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if( firstRender )
        {
            // Trigger enter animation without using CSS animation
            await SetMountedAsync( true );
            await SetHeight();
        }
    }

    private async ValueTask SetMountedAsync( bool value )
    {
        await DomInterop.RequestAnimationFrameAsync();

        _isMounted = value;
        StateHasChanged();
    }

    private async Task SetHeight()
    {
        var height = (await DomInterop.GetBoundingClientRect( _toastRef )).Height;
        _initialHeight = height;

        Model.Height = new Height( Model.Id, height );
        Toaster.Render();
    }
}
