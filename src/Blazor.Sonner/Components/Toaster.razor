@namespace Blazor.Sonner
@implements IDisposable
@inject ToastService ToastService

<CascadingValue TValue="Toaster" Value="@this" IsFixed="@true">
    <section tabindex="-1"
             aria-label="Notifications"
             aria-live="polite"
             aria-relevant="additions text"
             aria-atomic="false">
        @if( FilteredToasts?.Count > 0 )
        {
            for( var posIndex = 0; posIndex < PossiblePositions?.Count; posIndex++ )
            {
                var position = PossiblePositions[posIndex];
                var (y, x) = Utils.MapPosition( position );

                <ol @key="@position"
                    style="--gap: @($"{Gap}px"); --width: @($"{Constants.ToastWidth}px"); @Utils.GetOffset( Offset, MobileOffset )
                                           --front-toast-height: @FrontToastHeight;"
                    tabindex="-1"
                    data-sonner-toaster
                    data-sonner-theme="light"
                    data-y-position="@y"
                    data-x-position="@x"
                    @onmouseenter="@(() => Expanded = true)"
                    @onmousemove="@(() => Expanded = true)"
                    @onmouseleave="@(() => Expanded = false)">
                    @for( var index = 0; index < FilteredToasts.Count; index++ )
                    {
                        var toast = FilteredToasts[index];

                        if( (!toast.Position.HasValue && posIndex == 0) || toast.Position == position )
                        {
                            <Toast @key="@toast.Id"
                                   Index="@index"
                                   Model="@toast"
                                   Position="@position"
                                   OnHeightChanged="@OnToastHeightChanged" />
                        }
                    }
                </ol>
            }
        }
    </section>
</CascadingValue>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public Position Position { get; set; } = Position.BottomRight;
    [Parameter] public Offset? Offset { get; set; }
    [Parameter] public Offset? MobileOffset { get; set; }
    [Parameter] public int VisibleToasts { get; set; } = Constants.VisibleToastsAmount;
    [Parameter] public int Gap { get; set; } = Constants.Gap;

    internal bool Expanded { get; private set; }
    internal List<Height> ToastHeights { get; } = [];

    internal List<ToastModel> FilteredToasts =>
        !string.IsNullOrWhiteSpace( Id )
            ? _toasts.Where( t => t.ToasterId == Id ).ToList()
            : _toasts.Where( t => string.IsNullOrWhiteSpace( t.ToasterId ) ).ToList();

    private List<Position> PossiblePositions => FilteredToasts
        .Where( t => t.Position.HasValue )
        .Select( t => t.Position!.Value )
        .Prepend( Position )
        .Distinct()
        .ToList();

    private string FrontToastHeight => ToastHeights.Count > 0
        ? $"{ToastHeights[0].Value.ToString( CultureInfo.InvariantCulture )}px"
        : "0px";

    private readonly List<ToastModel> _toasts = [];

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    internal void Render() => StateHasChanged();

    private void ShowToast( object? sender, ToastShowEventArgs args )
    {
        _toasts.Insert( 0, args.Toast );
        StateHasChanged();
    }

    private void OnToastHeightChanged( Height height )
    {
        ToastHeights.Insert(0, height );
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ToastService.OnShow -= ShowToast;
    }
}
