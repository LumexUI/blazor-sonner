@namespace Blazor.Sonner
@implements IDisposable
@inject DomInterop DomInterop

<li @ref="@_toastRef"
    style="
--index: @Index;
--toasts-before: @Index;
--z-index: @(Toasts.Count - Index);
--offset: @($"{(_isRemoved ? _offsetBeforeRemove.ToString( CultureInfo.InvariantCulture ) : _offset.ToString( CultureInfo.InvariantCulture ))}px");
--initial-height: @(Toaster.Expand ? "auto" : $"{_initialHeight.ToString( CultureInfo.InvariantCulture )}px");
"
    tabindex="0"
    data-sonner-toast
    data-type="@Model.TypeAsString"
    data-styled="true"
    data-rich-colors="@Toaster.RichColors.ToAttr()"
    data-mounted="@_isMounted.ToAttr()"
    data-removed="@_isRemoved.ToAttr()"
    data-visible="@_isVisible.ToAttr()"
    data-expanded="@((_isExpanded || (Toaster.Expand && _isMounted)).ToAttr())"
    data-front="@_isFront.ToAttr()"
    data-swipe-out="false"
    data-y-position="@_position.Y"
    data-x-position="@_position.X">
    @if( Toaster.CloseButton )
    {
        <button aria-label=""
                data-disabled=""
                data-close-button @onclick="@DismissAsync">
            @Components.Assets.CloseIcon
        </button>
    }

    @if( Model.Type is not ToastType.Default )
    {
        <div data-icon>@Icon</div>
    }

    <div data-content>
        <div data-title>@Model.Title</div>
        @if( !string.IsNullOrWhiteSpace( Model.Description ) )
        {
            <div data-description>@Model.Description</div>
        }
    </div>
</li>

@code {
    [Parameter] public int Index { get; set; }
    [Parameter] public ToastModel Model { get; set; } = default!;
    [Parameter] public ToastPosition Position { get; set; } = ToastPosition.BottomRight;
    [Parameter] public EventCallback<Guid> OnDismiss { get; set; }
    [Parameter] public EventCallback<Guid> OnDismissing { get; set; }
    [Parameter] public EventCallback<Height> OnHeightChanged { get; set; }

    [CascadingParameter] private Toaster Toaster { get; set; } = default!;

    private List<ToastModel> Toasts => Toaster.FilteredToasts;
    private RenderFragment? Icon => Model.Type switch
    {
        ToastType.Success => Components.Assets.SuccessIcon,
        ToastType.Error => Components.Assets.ErrorIcon,
        ToastType.Info => Components.Assets.InfoIcon,
        ToastType.Warning => Components.Assets.WarningIcon,
        _ => null
    };

    private ToastTimer? _timer;

    private bool _isMounted;
    private bool _isRemoved;
    private bool _isVisible;
    private bool _isExpanded;
    private bool _isFront;

    private int _heightIndex;
    private double _offset;
    private double _offsetBeforeRemove;
    private double _initialHeight;
    private double _previousToastsHeight;

    private (string Y, string X) _position;

    private ElementReference _toastRef;

    protected override void OnInitialized()
    {
        _timer = new ToastTimer( Toaster.Duration );
        _timer.OnCompleted += () => InvokeAsync( DismissAsync );
        _timer.Start();
    }

    protected override void OnParametersSet()
    {
        _position = Utils.MapPosition( Position );

        _isFront = Index == 0;
        _isVisible = Index + 1 <= Toaster.VisibleToasts;
        _isExpanded = Toaster.Expanded;

        _heightIndex = Math.Max( 0, Toaster.ToastHeights.FindIndex( h => h.ToastId == Model.Id ) );
        _previousToastsHeight = Toaster.ToastHeights.Take( _heightIndex ).Sum( h => h.Value );
        _offset = _heightIndex * Toaster.Gap + _previousToastsHeight;
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if( firstRender )
        {
            // Trigger enter animation without using CSS animation
            await SetMountedAsync( true );
            await SetHeightAsync();
        }

        if( _isExpanded )
        {
            _timer?.Pause();
        }
        else
        {
            _timer?.Resume();
        }
    }

    private async ValueTask SetMountedAsync( bool value )
    {
        await DomInterop.RequestAnimationFrameAsync();

        _isMounted = value;
        StateHasChanged();
    }

    private async Task DismissAsync()
    {
        _isRemoved = true;
        _offsetBeforeRemove = _offset;

        await OnDismissing.InvokeAsync( Model.Id );
        await Task.Delay( Constants.TimeBeforeUnmount ); // Match with CSS transition duration
        await OnDismiss.InvokeAsync( Model.Id );
    }

    private async Task SetHeightAsync()
    {
        var height = (await DomInterop.GetBoundingClientRectAsync( _toastRef )).Height;
        _initialHeight = height;

        await OnHeightChanged.InvokeAsync( new Height( Model.Id, height ) );
    }

    void IDisposable.Dispose()
    {
        _timer?.Dispose();
    }
}
